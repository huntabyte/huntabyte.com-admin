generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

generator zod {
    provider = "zod-prisma-types"
    output   = "../src/lib/schemas/generated/"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id         String  @id @default(uuid())
    name       String?
    email      String  @unique
    role       Role    @default(FREE)
    customerId String?
}

model Course {
    id              Int           @id @default(autoincrement())
    title           String
    description     String?
    slug            String        @unique
    stripeProductId String?       @unique
    lastRevised     DateTime      @default(now())
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @default(now()) @updatedAt
    status          PublishStatus @default(DRAFT)
    modules         Module[]
    lessons         Lesson[]

    @@map("courses")
}

model Module {
    id        Int           @id @default(autoincrement())
    title     String
    createdAt DateTime      @default(now())
    updatedAt DateTime      @default(now()) @updatedAt
    status    PublishStatus @default(DRAFT)
    sortOrder Int           @default(0)
    lessons   Lesson[]
    course    Course        @relation(fields: [courseId], references: [id])
    courseId  Int

    @@index([courseId])
    @@map("modules")
}

model Lesson {
    id          Int           @id @default(autoincrement())
    title       String
    slug        String?
    content     String?       @db.Text()
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @default(now()) @updatedAt
    status      PublishStatus @default(DRAFT)
    contentType String        @default("VIDEO")
    moduleId    Int?
    isFree      Boolean       @default(false)
    sortOrder   Int           @default(0)
    videoUrl    String?
    module      Module?       @relation(fields: [moduleId], references: [id])
    course      Course?       @relation(fields: [courseId], references: [id])
    courseId    Int?

    @@index([courseId])
    @@index([moduleId])
    @@map("lessons")
}

model Article {
    id        Int           @id @default(autoincrement())
    title     String
    slug      String        @unique
    content   String        @db.Text()
    status    PublishStatus @default(DRAFT)
    createdAt DateTime      @default(now())
    updatedAt DateTime      @default(now()) @updatedAt

    Tag   Tag? @relation(fields: [tagId], references: [id])
    tagId Int?

    @@index([tagId])
}

model Tag {
    id   Int    @id @default(autoincrement())
    name String @unique

    articles Article[]
}

enum PublishStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum Role {
    ADMIN
    PRO
    FREE
}
